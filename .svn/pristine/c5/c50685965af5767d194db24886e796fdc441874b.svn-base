/**
 * 
 */
package com.daoshun.shiqu.service;

import java.io.File;
import java.text.DecimalFormat;
import java.util.Date;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.daoshun.shiqu.common.CommonUtils;
import com.daoshun.shiqu.dao.DataDao;
import com.daoshun.shiqu.pojo.FileInfo;
import com.daoshun.shiqu.pojo.Order;
import com.daoshun.shiqu.pojo.OrderDetail;
import com.daoshun.shiqu.pojo.PrintInfo;
import com.daoshun.shiqu.pojo.Store;
import com.daoshun.shiqu.pojo.StoreArea;
import com.daoshun.shiqu.pojo.StoreTable;

/**
 * @author qiuch
 * 
 */
@Service("baseService")
public class BaseService {

	@Resource
	public DataDao dataDao;

	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public String getFilePathById(long i) {
		if (i > 0) {
			FileInfo file = (FileInfo) dataDao.getObjectById(FileInfo.class, i);
			// 拼接文件访问路径
			if (file != null) {
				String path = CommonUtils.getFileRootUrl() + file.getFile_url() + file.getFile_name();
				return path.replace(File.separator, "/");
			}
		}
		return null;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public long uploadComplete(String fileurl, String filename, int file_type) {
		FileInfo finfo = new FileInfo();
		finfo.setFile_name(filename);
		finfo.setFile_url(fileurl);
		finfo.setFile_type(file_type);
		dataDao.addObject(finfo);
		return finfo.getId();
	}
	
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String sendOrderPrint(long order_id){
		Order order = dataDao.getObjectById(Order.class, order_id);
		if(order!=null){
			Store store = dataDao.getObjectById(Store.class, order.getStore_id());
			StoreTable table = dataDao.getObjectById(StoreTable.class, order.getTable_id());
			if(table!=null){
				StoreArea storearea = dataDao.getObjectById(StoreArea.class, table.getArea_id());
				if(storearea!=null){
					PrintInfo printinfo = dataDao.getObjectById(PrintInfo.class, storearea.getPrint_id1());
					if(printinfo!=null){
						StringBuffer content = new StringBuffer();
						//标签说明："<BR>"为换行符,"<CB></CB>"为居中放大,"<B></B>"为放大,"<C></C>"为居中,<L></L>字体变高
						//"<QR></QR>"为二维码,"<CODE>"为条形码,后面接12个数字
						DecimalFormat   fnum  =   new  DecimalFormat("#0.00");    
						if(printinfo.getType()==1){
							content.append("<C>"+store.getStore_name()+" 结账单</C><BR>");
							content.append("台号:"+table.getTable_no()+" 人数:"+order.getPeople_num()+"<BR>");
							content.append("下单人:"+ (CommonUtils.isEmptyString(order.getOrder_name())?"":order.getOrder_name())+"<BR>");
							content.append("下单时间:"+CommonUtils.getTimeFormat(order.getOrder_time(),null)+"<BR>");
							content.append("--------------------------------<BR>");
							content.append("名称　　　　　 单价  数量 金额<BR>");
							for(OrderDetail orderdetail:order.getMenu_list()){
								if(CommonUtils.isEmptyString(orderdetail.getMenu_name())){
									content.append(CommonUtils.textAppend(orderdetail.getMenu_name(), 8)+
											CommonUtils.numberAppend(fnum.format(orderdetail.getPrice()), 7)+
											CommonUtils.numberAppend(String.valueOf(orderdetail.getQuantity()), 4)+
									fnum.format(orderdetail.getPrice()*orderdetail.getQuantity())+
									"<BR>");
								}else{
								String menu_name = orderdetail.getMenu_name();
									while(menu_name.length()>8){
										content.append(menu_name.substring(0,7)+"<BR>");
										menu_name = menu_name.substring(8,menu_name.length());
									}
									content.append(CommonUtils.textAppend(menu_name, 8)+
											CommonUtils.numberAppend(fnum.format(orderdetail.getPrice()), 7)+
											CommonUtils.numberAppend(String.valueOf(orderdetail.getQuantity()), 4)+
									fnum.format(orderdetail.getPrice()*orderdetail.getQuantity())+
									"<BR>");
								}
							}
							content.append("备注:"+order.getComment()+"<BR>");
							content.append("--------------------------------<BR>");
							content.append("打印时间 :"+CommonUtils.getTimeFormat(new Date(),null)+"<BR>");
							content.append("消费总额:"+fnum.format(order.getPrice())+"元");
							return CommonUtils.sendOrderPrint(printinfo.getPrint_sn(), printinfo.getPrint_key(), content.toString(), "1");
						}else if(printinfo.getType()==2){
							
						}
						
					}
				}
			}
		}
		return null;
	}
	
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String sendOrderDetailPrint(long order_id){
		Order order = dataDao.getObjectById(Order.class, order_id);
		if(order!=null){
			String hql = " from PrintInfo where id in (  )";
		}
		return null;
	}
}
