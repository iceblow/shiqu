/**
 * 
 */
package com.daoshun.shiqu.common;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;

import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import com.daoshun.exception.NullParameterException;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * @author qiuch
 * 
 */
public class CommonUtils {

	/**
	 * 读取配置文件
	 */
	public static Properties properties = new Properties();
	static {
		try {
			String path = "config.properties";
			InputStream inStream = CommonUtils.class.getClassLoader().getResourceAsStream(path);
			if (inStream == null) {
				inStream = CommonUtils.class.getClassLoader().getResourceAsStream("/" + path);
			}
			properties.load(inStream);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 文件访问路径
	public static String getFileRootUrl() {
		return properties.getProperty("fileRootUrl");
	}

	public static String getLocationPath() {
		return properties.getProperty("uploadFilePath");
	}

	public static String getWebRootUrl() {
		return properties.getProperty("webRootUrl");
	}

	public static String getAppID() {
		return properties.getProperty("appid");
	}

	public static String getAppKEY() {
		return properties.getProperty("appkey");
	}

	public static String getSiteName() {
		return properties.getProperty("siteName");
	}

	/**
	 * 检查路径是否存在，不存在则创建路径
	 * 
	 * @param path
	 */
	public static void checkPath(String path) {
		String[] paths = null;
		if (path.contains("/")) {
			paths = path.split(File.separator);
		} else {
			paths = path.split(File.separator + File.separator);
		}
		if (paths == null || paths.length == 0) {
			return;
		}
		String pathdir = "";
		for (String string : paths) {
			pathdir = pathdir + string + File.separator;
			File file = new File(pathdir);
			if (!file.exists()) {
				file.mkdir();
			}
		}
	}

	/**
	 * 判断String是否为空
	 * 
	 */
	public static boolean isEmptyString(String value) {
		if (value == null || value.length() == 0) {
			return true;
		}
		return false;
	}

	/**
	 * String -> int
	 * 
	 * @param String
	 * @return int
	 */
	public static int parseInt(String string, int def) {
		if (isEmptyString(string))
			return def;
		int num = def;
		try {
			num = Integer.parseInt(string);
		} catch (Exception e) {
			num = def;
		}
		return num;
	}

	/**
	 * String -> long
	 * 
	 * @param String
	 * @return long
	 */
	public static long parseLong(String string, long def) {
		if (isEmptyString(string))
			return def;
		long num;
		try {
			num = Long.parseLong(string);
		} catch (Exception e) {
			num = def;
		}
		return num;
	}

	/**
	 * String -> double
	 * 
	 * @param String
	 * @return long
	 */
	public static double parseDouble(String string, double def) {
		if (isEmptyString(string))
			return def;
		double num;
		try {
			num = Double.parseDouble(string);
		} catch (Exception e) {
			num = def;
		}
		return num;
	}

	/**
	 * String -> double
	 * 
	 * @param String
	 * @return long
	 */
	public static float parseFloat(String string, float def) {
		if (isEmptyString(string))
			return def;
		float num;
		try {
			num = Float.parseFloat(string);
		} catch (Exception e) {
			num = def;
		}
		return num;
	}

	/**
	 * @param date
	 * @param string
	 * @return
	 */
	public static String getTimeFormat(Date date, String string) {
		SimpleDateFormat sdFormat;
		if (isEmptyString(string)) {
			sdFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		} else {
			sdFormat = new SimpleDateFormat(string);
		}
		try {
			return sdFormat.format(date);
		} catch (Exception e) {
			return "";
		}
	}

	public static int hasNext(List<?> a) {
		if (a != null && a.size() > 0) {
			return 1;
		}
		return 0;
	}

	/**
	 * MD5加密
	 * 
	 * @param 需要加密的String
	 * @return 加密后String
	 */
	public final static String MD5(String s) {
		char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
		try {
			byte[] strTemp = s.getBytes();
			// 使用MD5创建MessageDigest对象
			MessageDigest mdTemp = MessageDigest.getInstance("MD5");
			mdTemp.update(strTemp);
			byte[] md = mdTemp.digest();
			int j = md.length;
			char str[] = new char[j * 2];
			int k = 0;
			for (int i = 0; i < j; i++) {
				byte b = md[i];
				str[k++] = hexDigits[b >> 4 & 0xf];
				str[k++] = hexDigits[b & 0xf];
			}
			// return new String(str).toUpperCase();
			return new String(str);
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 格式化时间- String转换Date "yyyy-MM-dd HH:mm:ss"
	 * 
	 * @param 需格式化的时间
	 * @return 格式化后的时间
	 */
	public static Date getDateFormat(String date, String format) {
		if (isEmptyString(date))
			return null;
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		try {
			return sdf.parse(date);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 判断参数是否为空
	 * 
	 */
	public static void validateEmpty(String value) throws NullParameterException {
		if (value == null || value.length() == 0) {
			throw new NullParameterException();
		}
	}

	public static String makeRandomNo() {
		char[] timeStamp = CommonUtils.getTimeFormat(new Date(), "HHmmssyyyyMMdd").toCharArray();
		StringBuffer buffer = new StringBuffer();
		for (int i = 0; i < timeStamp.length; i++) {
			if (i % 2 == 0) {
				buffer.append(new Random().nextInt(10));
			}
			buffer.append(timeStamp[i]);
		}
		return buffer.toString();
	}

	public static String makeSerialNum() {
		String timeStamp = CommonUtils.getTimeFormat(new Date(), "yyyyMMddHHmmss");
		timeStamp = timeStamp + "_" + (new Random().nextInt(8999) + 1000);
		return timeStamp;
	}

	public static String sendSms(String phone, String content) {
		// http://202.91.244.252/qd/SMSSendYD?usr=***&pwd=***&mobile=***&sms=***&extdsrcid=***
		String data = "";
		StringBuilder url = new StringBuilder();
		url.append("http://202.91.244.252/qd/SMSSendYD?usr=");
		url.append("991050");
		url.append("&pwd=");
		url.append("szyq991050");
		url.append("&mobile=");
		url.append(phone);
		url.append("&sms=");
		try {
			url.append(java.net.URLEncoder.encode(content, "GBK"));
			HttpURLConnection conn = (HttpURLConnection) new URL(url.toString()).openConnection();
			InputStream is = conn.getInputStream();
			InputStreamReader isr = new InputStreamReader(is);
			BufferedReader br = new BufferedReader(isr);
			data = br.readLine();
			// System.out.println("sms_result: " + data);
			isr.close();
			is.close();
			conn.disconnect();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return data;
	}

	public static void setMaptoJson(HttpServletResponse response, Map<String, Object> map) {
		Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").disableHtmlEscaping().create();
		;
		String json = gson.toJson(map);
		PrintWriter out;
		response.setContentType("text/html;charset=UTF-8");
		try {
			out = response.getWriter();
			out.print(json);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void setResponseStr(String responseString, HttpServletResponse response) {
		response.setContentType("text/html;charset=UTF-8");
		PrintWriter out;
		try {
			out = response.getWriter();
			out.print(responseString);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 方法1：(参数1：打印机编号,参数2：KEY,参数3：打印内容,参数4:打印次数)
	public static String sendOrderPrint(String sn, String strkey, String content, String printtimes) {
		// 标签说明："<BR>"为换行符,"<CB></CB>"为居中放大,"<B></B>"为放大,"<C></C>"为居中,<L></L>字体变高
		// "<QR></QR>"为二维码,"<CODE>"为条形码,后面接12个数字
		// String content;
		// content = "<CB>测试打印</CB><BR>";
		// content += "名称　　　　　 单价  数量 金额<BR>";
		// content += "--------------------------------<BR>";
		// content += "饭　　　　　　 1.0    1   1.0<BR>";
		// content += "炒饭　　　　　 10.0   10  10.0<BR>";
		// content += "蛋炒饭　　　　 10.0   10  100.0<BR>";
		// content += "鸡蛋炒饭　　　 100.0  1   100.0<BR>";
		// content += "番茄蛋炒饭　　 1000.0 1   100.0<BR>";
		// content += "西红柿蛋炒饭　 1000.0 1   100.0<BR>";
		// content += "西红柿鸡蛋炒饭西红柿鸡蛋炒饭西红柿鸡蛋炒饭 100.0  10  100.0<BR>";
		// content += "备注：加辣<BR>";
		// content += "--------------------------------<BR>";
		// content += "合计：xx.0元<BR>";
		// content += "送货地点：广州市南沙区xx路xx号<BR>";
		// content += "联系电话：13888888888888<BR>";
		// content += "订餐时间：2014-08-08 08:08:08<BR>";
		// content += "<QR>http://www.dzist.com</QR>";
		// 通过POST请求，发送打印信息到服务器
		HttpPost post = new HttpPost(Constants.PRINT_IP + Constants.PRINT_HOSTNAME + "/printOrderAction");
		HttpClient client = new DefaultHttpClient();
		client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 60000);
		client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 60000);
		List<NameValuePair> nvps = new ArrayList<NameValuePair>();
		nvps.add(new BasicNameValuePair("sn", sn));
		nvps.add(new BasicNameValuePair("printContent", content));
		nvps.add(new BasicNameValuePair("key", strkey));
		nvps.add(new BasicNameValuePair("times", printtimes));
		InputStream is = null;
		try {
			post.setEntity(new UrlEncodedFormEntity(nvps, "utf-8"));
			HttpResponse response = client.execute(post);
			int statecode = response.getStatusLine().getStatusCode();
			if (statecode == 200) {
				HttpEntity httpentity = response.getEntity();
				String strentity = null;
				if (httpentity != null) {
					is = httpentity.getContent();
					byte[] b = new byte[1024];
					int length = 0;
					StringBuilder sb = new StringBuilder();
					while ((length = is.read(b)) != -1) {
						sb.append(new String(b, 0, length));
						// 如有乱码，请用下面这个句代码
						// sb.append(new String(b,0,length,"utf-8"));
					}
					strentity = sb.toString();
					return strentity;
				} else {
					return null;
				}
			} else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (is != null) {
				try {
					is.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (post != null) {
				post.abort();
			}
		}
		return null;
	}

	public static String PingYin(String str) {
		HanyuPinyinOutputFormat format = null;
		format = new HanyuPinyinOutputFormat();
		format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		// 转换一个字符串
		StringBuilder sb = new StringBuilder();
		String tempPinyin = null;
		for (int i = 0; i < str.length(); ++i) {
			tempPinyin = getCharacterPinYin(str.charAt(i));
			if (tempPinyin == null) {
				// 如果str.charAt(i)非汉字，则保持原样
				sb.append(str.charAt(i));
			} else {
				sb.append(tempPinyin.substring(0, 1));
			}
		}
		return sb.toString();
	}

	// 转换单个字符
	public static String getCharacterPinYin(char c) {
		HanyuPinyinOutputFormat format = null;
		String[] pinyin;
		format = new HanyuPinyinOutputFormat();
		format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		pinyin = null;
		try {
			pinyin = PinyinHelper.toHanyuPinyinStringArray(c, format);
		} catch (BadHanyuPinyinOutputFormatCombination e) {
			e.printStackTrace();
		}
		// 如果c不是汉字，toHanyuPinyinStringArray会返回null
		if (pinyin == null)
			return null;
		// 只取一个发音，如果是多音字，仅取第一个发音
		return pinyin[0];
	}

	public static String textAppend(String msg, int length) {
		while (msg.length() < length) {
			if (msg.length() == (length - 1)) {
				msg += " ";
			} else {
				msg += "　";
			}
		}
		return msg;
	}

	public static String numberAppend(String msg, int length) {
		while (msg.length() < length) {
			msg += " ";
		}
		return msg;
	}

	public static double twoDecimalP(Double d) {
		BigDecimal bigDecimal = new BigDecimal(d);
		double twoDecimalP = bigDecimal.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		return twoDecimalP;
	}
}
