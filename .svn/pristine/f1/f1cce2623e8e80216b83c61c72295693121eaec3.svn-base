package com.daoshun.shiqu.controller.wap;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.daoshun.exception.CustomException;
import com.daoshun.shiqu.common.CommonUtils;
import com.daoshun.shiqu.common.Constants;
import com.daoshun.shiqu.common.QueryResult;
import com.daoshun.shiqu.pojo.Coupon;
import com.daoshun.shiqu.pojo.MenuCategory;
import com.daoshun.shiqu.pojo.MyCoupon;
import com.daoshun.shiqu.pojo.Order;
import com.daoshun.shiqu.pojo.OrderDetail;
import com.daoshun.shiqu.service.wap.WapOrderService;

@Controller
@RequestMapping("/wap")
public class WapOrder {

	@Resource(name="wapOrderService")
	WapOrderService wapOrderService;
	
	/**
	 * 当前订单(未完成订单 state=1or2)
	 * @return
	 */
	@RequestMapping("/presentorderlist")
	public HashMap<String,Object> presentorderlist( Integer pageIndex, HttpSession session){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0) ;  
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getPresentOrderListBypage(21, pageIndex, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	@RequestMapping("/pullpresentorderlist")
	@ResponseBody
	public HashMap<String, Object> pullpresentorderlist(Integer pageIndex, HttpSession session){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0) ; 
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getPresentOrderListBypage(21, pageIndex, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	/**
	 * 堂食
	 * @param pageIndex
	 * @param session
	 * @return
	 */
	@RequestMapping("/hereorderlist")
	public HashMap<String, Object> hereorderlist(Integer pageIndex, HttpSession session, int is_out){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0) ; 
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getIsOutOrderListBypage(21, pageIndex, is_out, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	/**
	 * 堂食
	 * @param pageIndex
	 * @param session
	 * @return
	 */
	@RequestMapping("/pullhereorderlist")
	@ResponseBody
	public HashMap<String, Object> pullhereorderlist(Integer pageIndex, HttpSession session, int is_out){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0) ; 
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getIsOutOrderListBypage(21, pageIndex, is_out, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	/**
	 * 外卖
	 * @param pageIndex
	 * @param session
	 * @param is_out
	 * @return
	 */
	@RequestMapping("/outorderlist")
	public HashMap<String, Object> outorderlist(Integer pageIndex, HttpSession session, int is_out){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0) ; 
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getIsOutOrderListBypage(21, pageIndex, is_out, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	/**
	 * 外卖
	 * @param pageIndex
	 * @param session
	 * @param is_out
	 * @return
	 */
	@RequestMapping("/pulloutorderlist")
	@ResponseBody
	public HashMap<String, Object> pulloutorderlist(Integer pageIndex, HttpSession session, int is_out){
		HashMap<String, Object> result = new HashMap<String, Object>();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0); 
		if(pageIndex == null){
			pageIndex = 1;
		}
		QueryResult<Order> qresult =  wapOrderService.getIsOutOrderListBypage(21, pageIndex, is_out, Constants.WAPSTORELISTSIZE);
		result.put("orderlist",  qresult.getDataList());
		result.put("total", qresult.getTotal());
		return result;
	}
	
	
	/**
	 * 订单详情
	 * @param order_id
	 * @param session
	 * @return
	 */
	@RequestMapping("/orderdetail")
	public ModelAndView orderdetail(Long order_id, Long coupon_id, HttpSession session){
		ModelAndView mov = new ModelAndView();
		long wapuserid = CommonUtils.parseLong(String.valueOf(session.getAttribute("wapuserid")), 0);
		Order order = wapOrderService.getOrderDetail(order_id);
		List<OrderDetail> neworderdetail = new ArrayList<OrderDetail>();
		List<OrderDetail> orderdetails = order.getMenu_list();
		for(OrderDetail detail:orderdetails){
			if(detail.getDetail_flg()>=0){
				neworderdetail.add(detail);
			}
		}
		order.setMenu_list(neworderdetail);
		mov.addObject("order", order);
		if(coupon_id != null){
			Coupon coupon = wapOrderService.getCouponById(coupon_id);
			mov.addObject("coupon", coupon);
		}
		long conponcount = wapOrderService.getMyCouponUsedCount(21, order.getTotal_price(), order.getStore_id());
		mov.addObject("conponcount", conponcount);
		if(order.getState() == 1){
			//店家未确认
			mov.setViewName("wap/instateon");
		}else if(order.getState() == 2){
			//店家已确认
			mov.setViewName("wap/instatetw");
		}else if(order.getState() == 3){
			//店家拒单
			mov.setViewName("wap/instateth");
		}else if(order.getState() == 4){
			//已付款
			mov.setViewName("wap/instatefo");
		}else{
			//取消
			mov.setViewName("wap/instatefi");
		}
		return mov;
	}
	
	/**
	 * 取消订单
	 * @param order_id
	 * @param response
	 */
	@RequestMapping("/cancelorder")
	public void cancelorder(Long order_id, HttpServletResponse response){
		HashMap<String,Object> result = new HashMap<String,Object>();
		result.put("code", 1);
		try {
			wapOrderService.cancelOrder(order_id);
			result.put("message", "取消成功");
		} catch (CustomException e) {
			result.put("message", e.getMessage());
			result.put("code", 101);
			CommonUtils.setMaptoJson(response, result);
		} catch (Exception e) {
			e.printStackTrace();
			result.put("message", Constants.EXCEPTION);
			result.put("code", 101);
			CommonUtils.setMaptoJson(response, result);
		}
		CommonUtils.setMaptoJson(response, result);
	}
	
	/**
	 * 选择优惠券
	 * @param order_id
	 * @param coupon_id
	 * @return
	 */
	@RequestMapping("/selectcoupon")
	public ModelAndView selectconpon(Long order_id, Long coupon_id){
		ModelAndView mov = new ModelAndView();
		Order order = wapOrderService.getOrderDetail(order_id);
		List<MyCoupon> list = wapOrderService.getMyCouponList(order.getUser_id(), order.getTotal_price(), order.getStore_id());
		mov.addObject("mycouponlist", list);
		mov.addObject("order_id", order_id);
		mov.addObject("coupon_id", coupon_id);
		mov.setViewName("wap/mycouponlist");
		return mov;
	}
	
	@RequestMapping("/payorder")
	public ModelAndView  payorder(Long order_id, Long coupon_id){
		ModelAndView mov = new ModelAndView();
		Order order = wapOrderService.getOrderDetail(order_id);
		if(coupon_id != null){
			order.setCoupon_id(coupon_id);
			Coupon coupon = wapOrderService.getCouponById(coupon_id);
			mov.addObject("coupon", coupon);
		}
		order.setState(4);
		wapOrderService.updateOrder(order);
		mov.addObject("order", order);
		mov.setViewName("wap/paysuccess");
		return mov;
	}
}
