/**
 * 
 */
package com.daoshun.shiqu.service.manage;

import java.util.Date;
import java.util.List;

import org.apache.tomcat.util.bcel.classfile.Constant;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.daoshun.shiqu.common.CommonUtils;
import com.daoshun.shiqu.common.Constants;
import com.daoshun.shiqu.common.QueryResult;
import com.daoshun.shiqu.pojo.AgentInfo;
import com.daoshun.shiqu.pojo.AgentStoreRelate;
import com.daoshun.shiqu.pojo.HeadShopRelate;
import com.daoshun.shiqu.pojo.HeadStore;
import com.daoshun.shiqu.pojo.ManageUser;
import com.daoshun.shiqu.pojo.Store;
import com.daoshun.shiqu.pojo.StoreCategory;
import com.daoshun.shiqu.pojo.StoreUser;
import com.daoshun.shiqu.service.BaseService;
import com.google.gson.JsonElement;

/**
 * 后台管理商家Service
 * 
 * @author qiuch
 *
 */
@Service("maShopService")
@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
public class MaShopService extends BaseService {

	@SuppressWarnings("unchecked")
	public QueryResult<Store> getShopList(Integer pageIndex, String keywords, long category_id) {
		String hql = "from Store where del_flg = 0 ";
		if(category_id != 0){
			hql += " and category_id ="+category_id;
		}
		if(!CommonUtils.isEmptyString(keywords)){
			hql += " and store_name like '%"+keywords+"%'";
		}
		hql += " order by create_time desc";
		List<Store> dataList = (List<Store>) dataDao.pageQueryViaParam(hql, Constants.ADMINLISTNUM, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<Store> result = new QueryResult<Store>(dataList, total);
		return result;
	}

	public List<StoreCategory> getCategory() {
		return dataDao.getAllObject(StoreCategory.class);
	}

	@SuppressWarnings("unchecked")
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void editCategory(Long cid, String name) {
		StoreCategory storeCategory = dataDao.getObjectById(StoreCategory.class, cid);
		if (storeCategory != null) {
			storeCategory.setName(name);
			storeCategory.setUpdate_time(new Date());
			dataDao.updateObject(storeCategory);
		}
		String hql = " from Store where category_id = :category_id";
		List<Store> list = (List<Store>) dataDao.getObjectsViaParam(hql, new String[]{"category_id"}, cid);
		if(list != null && list.size() > 0){
			for (Store store : list) {
				store.setCategory_name(name);
				dataDao.updateObject(store);
			}
		}
	}

	@SuppressWarnings("unchecked")
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delCategory(Long cid) {
		String hql = " from Store where category_id = :category_id";
		List<Store> list = (List<Store>) dataDao.getObjectsViaParam(hql, new String[]{"category_id"}, cid);
		if(list != null && list.size() > 0){
			for (Store store : list) {
				store.setCategory_id(0);
				store.setCategory_name("");
				dataDao.updateObject(store);
			}
		}
		dataDao.deleteObjectById(StoreCategory.class, cid);
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addCategory(String name) {
		StoreCategory storeCategory = new StoreCategory();
		storeCategory.setName(name);
		storeCategory.setUpdate_time(new Date());
		dataDao.addObject(storeCategory);
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addShop(String store_name) {
		Store store = new Store();
		store.setStore_name(store_name);
		store.setUpdate_time(new Date());
		store.setCreate_time(new Date());
		store.setIntro(store_name);
		dataDao.addObject(store);
	}

	public Object getStoreUser(Long sid) {
		if (sid != null && sid > 0) {
			return dataDao.getFirstObjectViaParam("from StoreUser where privilege = 1 and store_id = " + sid, null);
		}
		return null;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String addStoreUser(Long sid, String phone, String password) {
		if (sid != null) {
			StoreUser storeUser = new StoreUser();
			storeUser.setPhone(phone);
			storeUser.setPassword(CommonUtils.MD5(password));
			storeUser.setStore_id(sid);
			storeUser.setPrivilege(1);
			dataDao.addObject(storeUser);
			return "success";
		} else {
			return "error";
		}
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String editStoreUser(Long suserid, String phone, String password) {
		if (suserid != null) {
			StoreUser storeUser = dataDao.getObjectById(StoreUser.class, suserid);
			storeUser.setPhone(phone);
			storeUser.setPassword(CommonUtils.MD5(password));
			// storeUser.setStore_id(sid);
			dataDao.updateObject(storeUser);
			return "success";
		} else {
			return "error";
		}
	}

	public List<StoreCategory> getStoreCategoryList() {
		List<StoreCategory> list = dataDao.getAllObject(StoreCategory.class);
		return list;
	}

	public Store getStoreById(Long store_id) {
		Store info = dataDao.getObjectById(Store.class, store_id);
		return info;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void updateStore(Store store) {
		dataDao.updateObject(store);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<HeadStore> getHeadStorelistByPage(Integer pageIndex, int pageSize, String keywords) {
		String hql = " from HeadStore where 1=1";
		if(!CommonUtils.isEmptyString(keywords)){
			hql += " and name like '%"+keywords+"%'";
		}
		List<HeadStore> list = (List<HeadStore>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<HeadStore> result = new QueryResult<HeadStore>(list, total);
		return result;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addHeadStore(HeadStore headstore) {
		dataDao.addObject(headstore);
	}

	public HeadStore getHeadStoreById(Long id) {
		HeadStore store = dataDao.getObjectById(HeadStore.class, id);
		return store;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delHeadStore(HeadStore store) {
		dataDao.deleteObject(store);
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void updateHeadStore(HeadStore headstore) {
		dataDao.updateObject(headstore);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<AgentInfo> getAgentInfolistByPage(Integer pageIndex, int pageSize, String keywords) {
		String hql = " from AgentInfo where 1=1";
		if(!CommonUtils.isEmptyString(keywords)){
			hql += " and name like '%"+keywords+"%'";
		}
		List<AgentInfo> list = (List<AgentInfo>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<AgentInfo> result = new QueryResult<AgentInfo>(list, total);
		return result;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addAgentInfo(AgentInfo agent) {
		dataDao.addObject(agent);
	}

	public AgentInfo getAgentInfoById(long id) {
		AgentInfo info = dataDao.getObjectById(AgentInfo.class, id);
		return info;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void updateAgentInfo(AgentInfo agent) {
		dataDao.updateObject(agent);
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delAgentInfo(AgentInfo agent) {
		dataDao.deleteObject(agent);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<ManageUser> getManageUserlistByPage(Integer pageIndex, int pageSize, String keywords) {
		String hql = " from ManageUser where 1=1";
		if(!CommonUtils.isEmptyString(keywords)){
			hql += " and name like '%"+keywords+"%'";
		}
		List<ManageUser> list = (List<ManageUser>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<ManageUser> result = new QueryResult<ManageUser>(list, total);
		return result;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addManageUser(ManageUser manageuser) {
		dataDao.addObject(manageuser);
	}

	public ManageUser getManageUserById(long id) {
		ManageUser info = dataDao.getObjectById(ManageUser.class, id);
		return info;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void updateManageUser(ManageUser manageuser) {
		dataDao.updateObject(manageuser);
	}

	public ManageUser getManageUserByName(String name) {
		String hql = " from ManageUser where name = :name";
		ManageUser info = (ManageUser) dataDao.getFirstObjectViaParam(hql, new String[]{"name"}, name);
		return info;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delManageUser(ManageUser manageuser) {
		dataDao.deleteObject(manageuser);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<Store> getNotReStoreListByPapge(Integer pageIndex, int pageSize) {
		String hql = " from Store where del_flg = 0 and store_id not in(select storeid from HeadShopRelate)";
		List<Store> list = (List<Store>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<Store> result = new QueryResult<Store>(list, total);
		return result;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addHeadShopRelate(HeadShopRelate relate) {
		dataDao.addObject(relate);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<Store> getMyReStoreListByPapge(Integer pageIndex, int pageSize, long headid) {
		String hql = " from Store where del_flg = 0 and store_id in(select storeid from HeadShopRelate where headid = "+headid+")";
		List<Store> list = (List<Store>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<Store> result = new QueryResult<Store>(list, total);
		return result;
	}

	public HeadShopRelate getHeadStoreByHeadStore(long storeid, Long headid) {
		String hql = " from HeadShopRelate where storeid ="+storeid+" and headid ="+headid;
		HeadShopRelate relate = (HeadShopRelate) dataDao.getFirstObjectViaParam(hql, null);
		return relate;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delHeadShopRelate(HeadShopRelate relate) {
		dataDao.deleteObject(relate);
	}

	@SuppressWarnings("unchecked")
	public List<HeadShopRelate> getHeadShopRelateListByhead(Long headid) {
		String hql = " from HeadShopRelate where headid="+headid;
		List<HeadShopRelate> list = (List<HeadShopRelate>) dataDao.getObjectsViaParam(hql, null);
		return list;
	}

	@SuppressWarnings("unchecked")
	public QueryResult<Store> getNotReAgentStoreListByPapge(Integer pageIndex, int pageSize) {
		String hql = " from Store where del_flg = 0 and store_id not in(select storeid from AgentStoreRelate)";
		List<Store> list = (List<Store>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<Store> result = new QueryResult<Store>(list, total);
		return result;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void addAgentStoreRelate(AgentStoreRelate relate) {
		dataDao.addObject(relate);
	}

	@SuppressWarnings("unchecked")
	public QueryResult<Store> getMyReAgentStoreListByPapge(Integer pageIndex, int pageSize, Long agentid) {
		String hql = " from Store where del_flg = 0 and store_id in(select storeid from AgentStoreRelate where agentid = "+agentid+")";
		List<Store> list = (List<Store>) dataDao.pageQueryViaParam(hql, pageSize, pageIndex, null);
		String counthql = " select count(*) "+hql;
		long total = (long) dataDao.getFirstObjectViaParam(counthql, null);
		QueryResult<Store> result = new QueryResult<Store>(list, total);
		return result;
	}

	public AgentStoreRelate getAgentStoreRelateByAgentStore(long storeid, Long agentid) {
		String hql = " from AgentStoreRelate where storeid ="+storeid+" and agentid ="+agentid;
		AgentStoreRelate relate = (AgentStoreRelate) dataDao.getFirstObjectViaParam(hql, null);
		return relate;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void delAgentStoreRelate(AgentStoreRelate relate) {
		dataDao.deleteObject(relate);
	}

	@SuppressWarnings("unchecked")
	public List<AgentStoreRelate> getAgentStoreRelateListByAgent(Long agentid) {
		String hql = " from AgentStoreRelate where agentid="+agentid;
		List<AgentStoreRelate> list = (List<AgentStoreRelate>) dataDao.getObjectsViaParam(hql, null);
		return list;
	}
}
